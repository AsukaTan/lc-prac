23/Feb/2023:
Review portion:

---------------
287
Binary Search
/**
鸽子笼问题
如果整个list里面有比mid这个index相等或者更小的值
eg. mid = 4 但是出现了5个值，则代表一定会有重复在4之前
所以我们在1-4里面去寻找重复的值也就是high = mid - 1;
注意inex value完全没有用我们只需要index就行了

PS: 好久不写很不熟练
*/
class Solution {
    public int findDuplicate(int[] nums) {
        /**
        time col: O(nlongn)
        space col: o(1)
            */
        int low = 0, high = nums.length - 1;
        int res = -1;
        while(low <= high){
            int count = 0;
            int mid = (high - low)/2 + low;
            for(int num : nums){
                if(num <= mid){
                    count++;
                }
            }
            if(count > mid){
                res = mid;
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }

        return res;
    }
}

快慢指针
/**
fast = nums[nums[fast]]
slow = nums[slow]

其中会形成一个cyclic graph因为不同的index里面会有同样的值
快慢指针一定会相遇，相遇之前是阶段1，后是阶段2
phase1:
d = distance
fast ptr是slow ptr 2 times 所以在相同单位时间内dis也是2倍 => 2d(slow) = d(fast)
我们把graph分为before cyclic entry point => dis(f)和after cyclic entry point => dis(c)
a => point they meet  n => fast ptr绕了几圈
2(f + a) = f + nC + a
2f + 2a = f + nC + a
f + a = nC (1)
phase2:
将slow ptr重新回到原点 将fast ptr变成slow的速度 然后重启追逐，slow and fast ptr一定在entry point相遇
slow: f 正好走到entry point
fast: because (1), a + f = nC must at entry point
*/

class Solution {
    public int findDuplicate(int[] nums) {
        /**
        time col: O(n)
        space col: o(1)
         */
	int slow = nums[0];
        int fast = nums[0];
	
	//phase 1
        while(true){
            slow = nums[slow];
            fast = nums[nums[fast]];
            if(slow == fast){
                break;
            }
        }

	//phase 2
        slow = nums[0];

        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }

        return fast;
    }
}


25/Feb/2023:
98
BST traversal
/**
注意这道题的number of tree range[1,10^4],所以如果root = 2^31 - 1的root.val的话带入的话无法使用Integer比较
必须使用Long比较
还有就是注意我们通过一个中间状态的node来进行DFS的编写
*/
class Solution {
    /**
    time col: O(N)
    space col: O(N) space for stack*/
    public boolean isValidBST(TreeNode root) {
        return DFS(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    public boolean DFS(TreeNode root, long min, long max){
          //base case
        if(root == null){
            return true;
        }
        if(root.val <= min || root.val >= max){
                return false;
        }
        return DFS(root.left, min, root.val) && DFS(root.right, root.val, max);
    }
}

114
/**
intuition: we should performance pre-order BST traversal but it is wrong
we should perform post order go into right branch first and left branch, and insert in reverse way
6	5	4 ...
选择中间状态5
让上一个接到5的right，让left变为null
同时让这个值变为prev，进入下一次循环
*/

class Solution {
    /**
    time col: O(N)
    space col: O(N)
     */
    public TreeNode prev = null; 
    public void flatten(TreeNode root) {
        if(root == null) return;

        flatten(root.right);
        flatten(root.left);
        root.right = prev;
        root.left = null;
        prev = root;
    }
}
