23/Feb/2023:
Review portion:

---------------
287
Binary Search
/**
鸽子笼问题
如果整个list里面有比mid这个index相等或者更小的值
eg. mid = 4 但是出现了5个值，则代表一定会有重复在4之前
所以我们在1-4里面去寻找重复的值也就是high = mid - 1;
注意inex value完全没有用我们只需要index就行了

PS: 好久不写很不熟练
*/
class Solution {
    public int findDuplicate(int[] nums) {
        /**
        time col: O(nlongn)
        space col: o(1)
            */
        int low = 0, high = nums.length - 1;
        int res = -1;
        while(low <= high){
            int count = 0;
            int mid = (high - low)/2 + low;
            for(int num : nums){
                if(num <= mid){
                    count++;
                }
            }
            if(count > mid){
                res = mid;
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }

        return res;
    }
}

快慢指针
/**
fast = nums[nums[fast]]
slow = nums[slow]

其中会形成一个cyclic graph因为不同的index里面会有同样的值
快慢指针一定会相遇，相遇之前是阶段1，后是阶段2
phase1:
d = distance
fast ptr是slow ptr 2 times 所以在相同单位时间内dis也是2倍 => 2d(slow) = d(fast)
我们把graph分为before cyclic entry point => dis(f)和after cyclic entry point => dis(c)
a => point they meet  n => fast ptr绕了几圈
2(f + a) = f + nC + a
2f + 2a = f + nC + a
f + a = nC (1)
phase2:
将slow ptr重新回到原点 将fast ptr变成slow的速度 然后重启追逐，slow and fast ptr一定在entry point相遇
slow: f 正好走到entry point
fast: because (1), a + f = nC must at entry point
*/

class Solution {
    public int findDuplicate(int[] nums) {
        /**
        time col: O(n)
        space col: o(1)
         */
	int slow = nums[0];
        int fast = nums[0];
	
	//phase 1
        while(true){
            slow = nums[slow];
            fast = nums[nums[fast]];
            if(slow == fast){
                break;
            }
        }

	//phase 2
        slow = nums[0];

        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }

        return fast;
    }
}


25/Feb/2023:
98
BST traversal
/**
注意这道题的number of tree range[1,10^4],所以如果root = 2^31 - 1的root.val的话带入的话无法使用Integer比较
必须使用Long比较
还有就是注意我们通过一个中间状态的node来进行DFS的编写
*/
class Solution {
    /**
    time col: O(N)
    space col: O(N) space for stack*/
    public boolean isValidBST(TreeNode root) {
        return DFS(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    public boolean DFS(TreeNode root, long min, long max){
          //base case
        if(root == null){
            return true;
        }
        if(root.val <= min || root.val >= max){
                return false;
        }
        return DFS(root.left, min, root.val) && DFS(root.right, root.val, max);
    }
}

114
/**
BST Traversal
intuition: we should performance pre-order BST traversal but it is wrong
we should perform post order go into right branch first and left branch, and insert in reverse way
6	5	4 ...
选择中间状态5
让上一个接到5的right，让left变为null
同时让这个值变为prev，进入下一次循环
*/

class Solution {
    /**
    time col: O(N)
    space col: O(N)
     */
    public TreeNode prev = null; 
    public void flatten(TreeNode root) {
        if(root == null) return;

        flatten(root.right);
        flatten(root.left);
        root.right = prev;
        root.left = null;
        prev = root;
    }
}

17
/**
BFS
Remember the pattern of classical queue
记得先给queue先喂一个值
注意循环string的时候需要把string先变为chararray用toCharArray() 
*/
class Solution {
    public List<String> letterCombinations(String digits) {
        /**
        time col: O(N^2)
        space col: O(3^n - 4^n)
        */
        List<String> res = new ArrayList();
        if(digits.equals("")) return res;
        String[] look_up = {"0", "1", "abc", "def", "ghi", "jkl",
        "mno", "pqrs", "tuv", "wxyz"};
        Queue<String> queue = new LinkedList();
        queue.offer(""); 
       for(int i = 0; i < digits.length(); i++){
            int dig = digits.charAt(i) - '0';
	    /**
		queue: a, b, c
		i = 1, dig = 3的情况下
		我们有我们需要依此将a, b, c拉出来
		然后和d, e, f进行排列组合
		首先组合成ad, ae, af
		这时候a出去了 b在queue的顶层
		我们peek()一下去得到信息
		当前的第一个level里面的内容没有全部poll()完 => (queue.peek().length() == i)
	    */							
            while(queue.peek().length() == i){
                String temp = queue.poll();
                for(char c : look_up[dig].toCharArray()){
                    queue.offer(temp + c);
                }
            }
        }

        while(!queue.isEmpty()){
            res.add(queue.poll());
        }

        return res;
    }
}


210
/**
BFS
如何将具体的例子化为抽象的做题模版很重要
同时在写的时候使用具体的例子帮助自己减少错误
*/
class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        int[] res = new int[numCourses];
        int j = 0;
        Queue<Integer> queue = new LinkedList();

        //build the indegree matrix
        for(int[] pre : prerequisites){
            indegree[pre[0]]++;
        }

        //add courses w/o pre add the queue
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0) queue.offer(i);
        }

        //
        while(!queue.isEmpty()){
            int cur = queue.poll();
            res[j++] = cur;
            for(int[] pre : prerequisites){

                    /**
                    if current course does not have preq(num of pre == 0) then we   
                    pass this choice since it already on the queue
                     */ 
                    if(indegree[pre[0]] == 0){
                        continue;
                    }

                    //subtract one pre course
                    if(pre[1] == cur)indegree[pre[0]]--;

                    /**
                    if pre == 0 after we subtract one pre course, then we add this 
                    course to the queue
                    */
                    if(indegree[pre[0]] == 0){
                        queue.offer(pre[0]);
                    }
                
            }
        }

        //we check if there is some course still have pre course
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] != 0){
                return new int[0];
            }
        }

        return res;
    }
}


26/Feb/2023:
1367
/**
DFS
这道题为两个dfs嵌套，需要记住嵌套dfs的pattern
*/
class Solution {
    public boolean isSubPath(ListNode head, TreeNode root) {
        /**
            NOTE：figure out base case then 选取中间状态进行DFS编写(IMPORTANT)
            N = tree size, H = tree height, L = list length
            time col: O(N * min(L,H))
            space col: O(H)
         */
        //always handle corner case first
        if(root == null && head == null) return true;
        if(root == null && head != null) return false;
        if(root != null && head == null) return true;
        
        return dfs(head, root);
    }

    /**
        先使用dfs查询每个TreeNode的值 == ListNode的值，
        如果吻合就进行path check不吻合就查看children的情况
     */
    public boolean dfs(ListNode head, TreeNode root){
        if(root == null) return false;
        if(checkPath(head, root)){
            return true;
        }else{
            return dfs(head, root.left) || dfs(head, root.right);
        }
    }

    /**
        在每个TreeNode与ListNode进行比较
        注意base case如果curHead到尽头了 说明has path
     */
    public boolean checkPath(ListNode curHead, TreeNode curRoot){
        if(curHead == null) return true;
        if(curRoot == null) return false;

        if(curHead.val == curRoot.val){
            return checkPath(curHead.next, curRoot.left) ||
                checkPath(curHead.next, curRoot.right);
        }else{
            return false;
        }
    }
}


27/Feb/2023:
1376
/**
先建graph再dfs模型
记住ArrayList的method!!!!!
别把get()和indexOf()搞混了
*/
class Solution {
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
        //always base case comes first
        if(n == 1 || n == 0) return 0;

        //turn into graph
        List<List<Integer>> graph = new ArrayList();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList());
        }
        for(int i = 0; i < n; i++){
            int sub = i, boss = manager[i];
            if(boss != -1){
                graph.get(boss).add(sub);
            }
        }

        //run dfs on that graph
        return dfs(graph, headID, informTime);
    }

    public int dfs(List<List<Integer>> graph, int index, int[] informTime){
        //base case
        if(graph.get(index).size() == 0){
            return 0;
        }
        

        int max = 0;
        for(int i = 0; i < graph.get(index).size(); i++){
            max = Math.max(max, dfs(graph, graph.get(index).get(i), informTime));
        }

        return max + informTime[index];
    }
}


28/Feb/2023:
/**
Tire内容不多 不是那么重要先跳过
HashMap没啥东西

LinkedList周末看
周末计划一天dp一天linkedList
今天先看ptr iteration
*/
/**
216
Typical find K-th largest in the array
*/
class Solution {
    public int findKthLargest(int[] nums, int k) {
        //no base case in this question so we move on
        int low = 0, high = nums.length - 1;
        while(low <= high){
            //partition returns the relative pos in array
            int partition = findPartition(nums, low, high);
            if(partition == (nums.length - k)){
                //if the relative oreder match
                return nums[partition]; 
            }else if(partition > (nums.length - k)){
                //if the partition on right side of target => go left
                high = partition - 1;
            }else{
                low = partition + 1;
            }
        }
        return nums[high];
    }

    public int findPartition(int[] nums, int low, int high){
        /**
            we assume start is the pivot point every time
            random points are both fine in this method
         */
         int pivot = low;
         while(low < high){
             
             /**
                first let low points to the first elts which > pivot
                note when low == high, we also need to move one more space
             */
            while(low <= high && nums[pivot] >= nums[low]) low++;
            //same for high ptr
            while(low <= high && nums[pivot] < nums[high]) high--;

            if(low < high){
                int temp = nums[low];
                nums[low] = nums[high];
                nums[high] = temp;
            }
         }

         int temp = nums[pivot];
         nums[pivot] = nums[high];
         nums[high] = temp;

         return high;
    }
}

