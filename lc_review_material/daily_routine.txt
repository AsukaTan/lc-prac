23/Feb/2023:
Review portion:

---------------
287
Binary Search
/**
鸽子笼问题
如果整个list里面有比mid这个index相等或者更小的值
eg. mid = 4 但是出现了5个值，则代表一定会有重复在4之前
所以我们在1-4里面去寻找重复的值也就是high = mid - 1;
注意inex value完全没有用我们只需要index就行了

PS: 好久不写很不熟练
*/
class Solution {
    public int findDuplicate(int[] nums) {
        /**
        time col: O(nlongn)
        space col: o(1)
            */
        int low = 0, high = nums.length - 1;
        int res = -1;
        while(low <= high){
            int count = 0;
            int mid = (high - low)/2 + low;
            for(int num : nums){
                if(num <= mid){
                    count++;
                }
            }
            if(count > mid){
                res = mid;
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }

        return res;
    }
}

快慢指针
/**
fast = nums[nums[fast]]
slow = nums[slow]

其中会形成一个cyclic graph因为不同的index里面会有同样的值
快慢指针一定会相遇，相遇之前是阶段1，后是阶段2
phase1:
d = distance
fast ptr是slow ptr 2 times 所以在相同单位时间内dis也是2倍 => 2d(slow) = d(fast)
我们把graph分为before cyclic entry point => dis(f)和after cyclic entry point => dis(c)
a => point they meet  n => fast ptr绕了几圈
2(f + a) = f + nC + a
2f + 2a = f + nC + a
f + a = nC (1)
phase2:
将slow ptr重新回到原点 将fast ptr变成slow的速度 然后重启追逐，slow and fast ptr一定在entry point相遇
slow: f 正好走到entry point
fast: because (1), a + f = nC must at entry point
*/

class Solution {
    public int findDuplicate(int[] nums) {
        /**
        time col: O(n)
        space col: o(1)
         */
	int slow = nums[0];
        int fast = nums[0];
	
	//phase 1
        while(true){
            slow = nums[slow];
            fast = nums[nums[fast]];
            if(slow == fast){
                break;
            }
        }

	//phase 2
        slow = nums[0];

        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }

        return fast;
    }
}


25/Feb/2023:
98
BST traversal
/**
注意这道题的number of tree range[1,10^4],所以如果root = 2^31 - 1的root.val的话带入的话无法使用Integer比较
必须使用Long比较
还有就是注意我们通过一个中间状态的node来进行DFS的编写
*/
class Solution {
    /**
    time col: O(N)
    space col: O(N) space for stack*/
    public boolean isValidBST(TreeNode root) {
        return DFS(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    public boolean DFS(TreeNode root, long min, long max){
          //base case
        if(root == null){
            return true;
        }
        if(root.val <= min || root.val >= max){
                return false;
        }
        return DFS(root.left, min, root.val) && DFS(root.right, root.val, max);
    }
}

114
/**
BST Traversal
intuition: we should performance pre-order BST traversal but it is wrong
we should perform post order go into right branch first and left branch, and insert in reverse way
6	5	4 ...
选择中间状态5
让上一个接到5的right，让left变为null
同时让这个值变为prev，进入下一次循环
*/

class Solution {
    /**
    time col: O(N)
    space col: O(N)
     */
    public TreeNode prev = null; 
    public void flatten(TreeNode root) {
        if(root == null) return;

        flatten(root.right);
        flatten(root.left);
        root.right = prev;
        root.left = null;
        prev = root;
    }
}

17
/**
BFS
Remember the pattern of classical queue
记得先给queue先喂一个值
注意循环string的时候需要把string先变为chararray用toCharArray() 
*/
class Solution {
    public List<String> letterCombinations(String digits) {
        /**
        time col: O(N^2)
        space col: O(3^n - 4^n)
        */
        List<String> res = new ArrayList();
        if(digits.equals("")) return res;
        String[] look_up = {"0", "1", "abc", "def", "ghi", "jkl",
        "mno", "pqrs", "tuv", "wxyz"};
        Queue<String> queue = new LinkedList();
        queue.offer(""); 
       for(int i = 0; i < digits.length(); i++){
            int dig = digits.charAt(i) - '0';
	    /**
		queue: a, b, c
		i = 1, dig = 3的情况下
		我们有我们需要依此将a, b, c拉出来
		然后和d, e, f进行排列组合
		首先组合成ad, ae, af
		这时候a出去了 b在queue的顶层
		我们peek()一下去得到信息
		当前的第一个level里面的内容没有全部poll()完 => (queue.peek().length() == i)
	    */							
            while(queue.peek().length() == i){
                String temp = queue.poll();
                for(char c : look_up[dig].toCharArray()){
                    queue.offer(temp + c);
                }
            }
        }

        while(!queue.isEmpty()){
            res.add(queue.poll());
        }

        return res;
    }
}


210
/**
BFS
如何将具体的例子化为抽象的做题模版很重要
同时在写的时候使用具体的例子帮助自己减少错误
*/
class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        int[] res = new int[numCourses];
        int j = 0;
        Queue<Integer> queue = new LinkedList();

        //build the indegree matrix
        for(int[] pre : prerequisites){
            indegree[pre[0]]++;
        }

        //add courses w/o pre add the queue
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0) queue.offer(i);
        }

        //
        while(!queue.isEmpty()){
            int cur = queue.poll();
            res[j++] = cur;
            for(int[] pre : prerequisites){

                    /**
                    if current course does not have preq(num of pre == 0) then we   
                    pass this choice since it already on the queue
                     */ 
                    if(indegree[pre[0]] == 0){
                        continue;
                    }

                    //subtract one pre course
                    if(pre[1] == cur)indegree[pre[0]]--;

                    /**
                    if pre == 0 after we subtract one pre course, then we add this 
                    course to the queue
                    */
                    if(indegree[pre[0]] == 0){
                        queue.offer(pre[0]);
                    }
                
            }
        }

        //we check if there is some course still have pre course
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] != 0){
                return new int[0];
            }
        }

        return res;
    }
}


26/Feb/2023:
1367
/**
DFS
这道题为两个dfs嵌套，需要记住嵌套dfs的pattern
*/
class Solution {
    public boolean isSubPath(ListNode head, TreeNode root) {
        /**
            NOTE：figure out base case then 选取中间状态进行DFS编写(IMPORTANT)
            N = tree size, H = tree height, L = list length
            time col: O(N * min(L,H))
            space col: O(H)
         */
        //always handle corner case first
        if(root == null && head == null) return true;
        if(root == null && head != null) return false;
        if(root != null && head == null) return true;
        
        return dfs(head, root);
    }

    /**
        先使用dfs查询每个TreeNode的值 == ListNode的值，
        如果吻合就进行path check不吻合就查看children的情况
     */
    public boolean dfs(ListNode head, TreeNode root){
        if(root == null) return false;
        if(checkPath(head, root)){
            return true;
        }else{
            return dfs(head, root.left) || dfs(head, root.right);
        }
    }

    /**
        在每个TreeNode与ListNode进行比较
        注意base case如果curHead到尽头了 说明has path
     */
    public boolean checkPath(ListNode curHead, TreeNode curRoot){
        if(curHead == null) return true;
        if(curRoot == null) return false;

        if(curHead.val == curRoot.val){
            return checkPath(curHead.next, curRoot.left) ||
                checkPath(curHead.next, curRoot.right);
        }else{
            return false;
        }
    }
}


27/Feb/2023:
1376
/**
先建graph再dfs模型
记住ArrayList的method!!!!!
别把get()和indexOf()搞混了
*/
class Solution {
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
        //always base case comes first
        if(n == 1 || n == 0) return 0;

        //turn into graph
        List<List<Integer>> graph = new ArrayList();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList());
        }
        for(int i = 0; i < n; i++){
            int sub = i, boss = manager[i];
            if(boss != -1){
                graph.get(boss).add(sub);
            }
        }

        //run dfs on that graph
        return dfs(graph, headID, informTime);
    }

    public int dfs(List<List<Integer>> graph, int index, int[] informTime){
        //base case
        if(graph.get(index).size() == 0){
            return 0;
        }
        

        int max = 0;
        for(int i = 0; i < graph.get(index).size(); i++){
            max = Math.max(max, dfs(graph, graph.get(index).get(i), informTime));
        }

        return max + informTime[index];
    }
}


28/Feb/2023:
/**
Tire内容不多 不是那么重要先跳过
HashMap没啥东西

LinkedList周末看
周末计划一天dp一天linkedList
今天先看ptr iteration
*/
/**
216
Typical find K-th largest in the array
*/
class Solution {
    public int findKthLargest(int[] nums, int k) {
        //no base case in this question so we move on
        int low = 0, high = nums.length - 1;
        while(low <= high){
            //partition returns the relative pos in array
            int partition = findPartition(nums, low, high);
            if(partition == (nums.length - k)){
                //if the relative oreder match
                return nums[partition]; 
            }else if(partition > (nums.length - k)){
                //if the partition on right side of target => go left
                high = partition - 1;
            }else{
                low = partition + 1;
            }
        }
        return nums[high];
    }

    public int findPartition(int[] nums, int low, int high){
        /**
            we assume start is the pivot point every time
            random points are both fine in this method
         */
         int pivot = low;
         while(low < high){
             
             /**
                first let low points to the first elts which > pivot
                note when low == high, we also need to move one more space
             */
            while(low <= high && nums[pivot] >= nums[low]) low++;
            //same for high ptr
            while(low <= high && nums[pivot] < nums[high]) high--;

            if(low < high){
                int temp = nums[low];
                nums[low] = nums[high];
                nums[high] = temp;
            }
         }

         int temp = nums[pivot];
         nums[pivot] = nums[high];
         nums[high] = temp;

         return high;
    }
}

2023/Mar/11
/**
今天继续ptr iteration
*/
280
class Solution {
    public void wiggleSort(int[] nums) {
        //always handle corner case first
        if(nums.length == 0) return;

        for(int i = 0; i < nums.length - 1; i++){
            if(i % 2 == 0){
                //if its even
                if(nums[i + 1] < nums[i]){
                    swap(nums, i, i + 1);
                }
            }else{
                if(nums[i + 1] > nums[i]){
                    swap(nums, i, i + 1);
                }
            }
        }
    }

    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
        return;
    }
}


324
class Solution {
    public void wiggleSort(int[] nums) {
        /**
        该题不能使用从左到右的count去填充数组
        因为res数组也是从左到右的填充方法 我们会在中间遇到重复
        如果是从右往左到count
        得相反方向填写 
        */
        Arrays.sort(nums);
        int[] res = new int[nums.length];
        int count = nums.length - 1;
        for(int i = 1; i < nums.length; i+=2){
            res[i] = nums[count--];
        }
        for(int i = 0; i < nums.length; i+=2){
            res[i] = nums[count--];
        }

        for(int i = 0; i < nums.length; i++){
            nums[i] = res[i];
        }
    }
}

15
//3 ptr usage
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        //-4,-1,-1,0,1,2
        
        //store results in res
        List<List<Integer>> res = new ArrayList();

        //sort
        Arrays.sort(nums);

        for(int i = 0; i < nums.length - 2; i++){
            /**
                Remember to check duplicate 
                when you are in i, check for i - 1 == i, if == just pass
             */
            if(i != 0 && nums[i] == nums[i - 1]) continue;
            int low = i + 1, high = nums.length - 1;
            //now do 2 sum
            while(low < high){
                int sum = nums[i] + nums[low] + nums[high];
                //sum > 0 shift high ptr to left
                while(sum > 0 && low < high){
                    sum = nums[i] + nums[low] + nums[--high];
                }
                //sum < 0 shift low ptr to right
                while(sum < 0 && low < high){
                    sum = nums[i] + nums[++low] + nums[high];
                }
                if(low < high && sum == 0){
                    List<Integer> temp = new ArrayList(Arrays.asList(nums[i], nums  [low], nums[high]));
                    res.add(temp);
                    /**
                    remember to check for duplicate after we find a perfect solution
                    that is [low + 1] == [low] or high...
                    update low and high after we skip duplicate
                     */
                    while(low < high && nums[low] == nums[low + 1])low++;
                    while(low < high && nums[high] == nums[high - 1])high--;
                    low++;
                    high--;
                }
            }
        }

        return res;
    }
}


/**
Sliding windows prac
*/

/**
最简单的sliding wind 有个快的ptr在满足情况下一直往右走 在满足条件的情况下
如果条件不满足了 则停止快ptr 然后让慢ptr往右走一直到条件满足继续循环快的ptr
*/
class Solution {
    public int lengthOfLongestSubstring(String s) {
        /**
        我们有low / high 两个ptr
        如果high扫到重复的就让low扫到重复的val上一次出现即可
        */

        //corner case
        if(s.length() == 0) return 0;

        HashSet<Character> hs = new HashSet();

        int low = 0, high = 0, max = 0;

        while(high < s.length()){
            if(!hs.contains(s.charAt(high))){
                hs.add(s.charAt(high));
                max = Math.max(max, hs.size());
                high++;
            }else{
                hs.remove(s.charAt(low));
                low++;
            }
        }

        return max;
    }
}


12/Mar/2023
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        //corner case
        if(nums.length == 1) return nums[0] < target ? 0 : 1;

        int sum = 0, left = 0, res = Integer.MAX_VALUE;
        for(int right = 0; right < nums.length; right++){
            sum += nums[right];
            while(sum >= target){
                res = Math.min(res, right - left + 1);
                sum -= nums[left++];
            }
        }

        return res == Integer.MAX_VALUE ? 0 : res;
    }
}

13/Mar/2023:
subarray sum
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public List<Integer> subarraySum(int[] nums) {
        List<Integer> res = new ArrayList();
        //corner case
        if(nums.length == 0) return res;

        if(nums.length == 1 || nums[0] == 0){
            res.add(0);
            res.add(0);
            return res;
        } 

        int[] dp = new int[nums.length + 1];
        Map<Integer, Integer> hm = new HashMap();
        
        //get prefix sum into dp
        dp[0] = 0;
        for(int i = 1; i < nums.length; i++){
            dp[i] = dp[i - 1] + nums[i - 1];
        }

        //turn 
        for(int i = 0; i < dp.length; i++){
            if(hm.containsKey(dp[i])){
                int left = hm.get(dp[i]);
                int right = i - 1;
                res.add(left);
                res.add(right);
                break;
            }
            hm.put(dp[i], i);
        }

        return res;
    }
}

Continuous Subarray Sum
public class Solution {
    /**
     * @param a: An integer array
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public List<Integer> continuousSubarraySum(int[] a) {
        /**
            如果前面是负数的话 我们就抛弃前面 让left变成当前right的下一位
            同时让sum = 0
            如果我们找到了比maxsum大的sum的话 我们就更新maxsum 储存left right
        */
        // corner case
        if(a.length == 0) return new ArrayList();
        int[] temp = new int[2];

        int left = 0, right = 0, max = Integer.MIN_VALUE, sum = 0;
        for(right = 0; right < a.length; right++){
            sum += a[right];
            if(sum > max){
                max = sum;
                temp[0] = left;
                temp[1] = right;
            }
            if(sum < 0){
                sum = 0;
                left = right + 1;
            }
        }

        return Arrays.asList(temp[0], temp[1]);
    }
}


16/Mar/2023
Lintcode 405
public class Solution {
    /**
     * @param matrix: an integer matrix
     * @return: the coordinate of the left-up and right-down number
     */
    public int[][] submatrixSum(int[][] matrix) {
        // write your code here
        int[][] res = new int[2][2];
        //base case first
        if(matrix.length == 0 || matrix[0].length == 0)
            return res;

        int m = matrix.length, n = matrix[0].length;
        //sumup matrix
        int[][] dp = new int[m + 1][n + 1];
        for(int i = 1; i < m + 1; i++){
            for(int j = 1; j < n + 1; j++){
                dp[i][j] = matrix[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1];
            }
        }

        //loop through rows to find vert diff
        for(int startRow = 0; startRow < m; startRow++){
            for(int endRow = startRow + 1; endRow < m + 1; endRow++){

                //build hashmap
                Map<Integer, Integer> hm = new HashMap();
                
                //loop cols to find same vertDiff
                for(int col = 0; col < n + 1; col++){
                    int vertDiff = dp[endRow][col] - dp[startRow][col];
                    if(hm.containsKey(vertDiff)){
                        res[0][0] = startRow;
                        res[0][1] = hm.get(vertDiff);
                        res[1][0] = endRow - 1;
                        res[1][1] = col - 1;
                        return res;
                    }else{
                        hm.put(vertDiff, col);
                    }
                }
            }
        }

        return res;
    }
}


560
class Solution {
    public int subarraySum(int[] nums, int k) {
        int[] dp = new int[nums.length + 1];
        dp[0] = 0;
        int count = 0;
        //get the value into prefix arr
        for(int i = 1; i < dp.length; i++){
            dp[i] = dp[i - 1] + nums[i - 1];
        }

        //hashmap with key: prefixSum value:count to k
        Map<Integer, Integer> hm = new HashMap();
        for(int i = 0; i < dp.length; i++){
            if(hm.containsKey(dp[i] - k))
                count += hm.get(dp[i] - k);
            hm.put(dp[i], hm.getOrDefault(dp[i], 0) + 1);
        }

        return count;
    }
}

209
TLE, use sliding windows instead
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        //load prefix sum
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        for(int i = 1; i < dp.length; i++){
            dp[i] = dp[i - 1] + nums[i];
        }

        int min = Integer.MAX_VALUE;
        for(int i = 0; i < dp.length; i++){
            for(int j = i; j < dp.length; j++){
                int val = dp[j] - dp[i] + nums[i];
                if(val >= target){
                    min = Math.min(min, j - i + 1);
                    break;
                }
            }
        }

        return min == Integer.MAX_VALUE ? 0 : min;
    }
}

Lintcode 404
public class Solution {
    /**
     * @param a: An integer array
     * @param start: An integer
     * @param end: An integer
     * @return: the number of possible answer
     */
    public int subarraySumII(int[] a, int start, int end) {	
 	//index相当于一个分隔符确保每个elt我们找到符合条件的substring
        //left ptr确保不超过最大值
	//right ptr确保一定大于最小值
	//最后将right - left得到所有组合
        //如果当前windows sum大于end则移left ptr
        //如果下一个value的sum大于start,则移动right ptr
        int[] dp = new int[a.length + 1];
        dp[0] = 0;
        for(int i = 1; i < dp.length; i++){
            dp[i] = dp[i - 1] + a[i - 1];
        }

        int left = 0, right = 0, count = 0;
        for(int i = 0; i < dp.length; i++){
            while(left < i && dp[i] - dp[left] > end){
                left++;
            }
            while(right < i && dp[i] - dp[right] >= start){
                right++;
            }

            count += (right - left);
        }

        return count;
    }
}

322
class Solution {
    public int coinChange(int[] coins, int amount) {
        //corner case
        if(amount == 0) return 0;

        //we use top down dp recursive memo deal with it

        //first we use amount as size of dp
        int[] memo = new int[amount + 1];
        memo[0] = 0;

        int res = TopDown(coins, amount, memo, amount);
        //使用memo.length代替Integer.MAX_VALUE因为+1会overflow memo的长度不会变成amount + 1因为memo最小为1组成
        return res == memo.length ? -1 : res;

    }

    public int TopDown(int[] coins, int amount, int[] memo, int cur){
        //first ensure for memo
        if(memo[cur] != 0){
            return memo[cur];
        }

        //ensure base case
        if(cur == 0){
            return 0;
        }

        //use dp to express our state
        int min = memo.length;
        for(int coin : coins){
            if(cur - coin >= 0)
                min = Math.min(min, TopDown(coins, amount, memo, cur - coin) + 1);//the min from last loop or the current loop
        }

        //assign min to cur 
        memo[cur] = min;
        return min;
    }
}

class Solution {
    public int coinChange(int[] coins, int amount) {
        //first corner case
        if(amount == 0) return 0;

        //fill up dp array
        int[] dp = new int[amount + 1];
        
        for(int i = 1; i < dp.length; i++){
            dp[i] = dp.length;
            for(int coin : coins){
                if(i - coin >= 0)
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
            }
        }

        return dp[amount] == dp.length ? -1 : dp[amount];
    }
}


361
class Solution {
    public int maxKilledEnemies(char[][] grid) {
        //这道题的思想很重要 我们把 分成横向和竖向
        //横向只有在刚开始或者遇到墙的时候才会重新算， 要不然都是一样的
        //竖向同理
        //比如【0，0】算完 【0，1】就不需要算横向的 因为和之前一样
    }
}


63
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        //do it in-place

        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        //corner case if first cell is obstacle
        if(obstacleGrid[0][0] == 1) return 0;

        obstacleGrid[0][0] = 1;

        for(int i = 1; i < m; i++){
            //如果当前是空地 然后前面一个也是空地的话 我们则让他们等于1
            //我们不可以break掉 因为in-place的话后面可能出现obstacle，然后remains 1，就出现bug了
            if(obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1){
                obstacleGrid[i][0] = 1;
            }else{
                obstacleGrid[i][0] = 0;
            }
        }

        for(int i = 1; i < n; i++){
            if( obstacleGrid[0][i] == 0 && obstacleGrid[0][i - 1] == 1){
                obstacleGrid[0][i] = 1;
            }else{
                obstacleGrid[0][i] = 0;
            }
        }

        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 0)
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
                else
                    obstacleGrid[i][j] = 0;
            }
        }

        return obstacleGrid[m - 1][n - 1];
    }
}

198
class Solution {
    public int rob(int[] nums) {
       //we use top down dfs with memo
       //1. size 2. 初始化的值
       //切记我们有两种选择rob这家, 然后就是rob nums - 2 或者 不rob这家, 然后rob nums - 1这家
       //使用例子对<0的case进行判断
       int[] memo = new int[nums.length];
        Arrays.fill(memo, - 1);
        memo[0] = nums[0];
        return TopDown(nums, memo, nums.length - 1);
    }

    public int TopDown(int[] nums, int[] memo, int i){
        //base case first
        if(i < 0) return 0;

        if(memo[i] != -1) return memo[i];

        int max = Math.max(TopDown(nums, memo, i - 2) + nums[i], TopDown(nums, memo, i - 1));

        memo[i] = max;
        return max;
    }
}

//use classical dp
//尽量使用+, instead of - 因为- corner case考虑
class Solution {
    public int rob(int[] nums) {
       //we use dp

       int[] dp = new int[nums.length + 1];
        dp[0] = 0;
        dp[1] = nums[0];
        for(int i = 1; i < dp.length - 1; i++){
            dp[i + 1] = Math.max(dp[i - 1] + nums[i], dp[i]);    
        }
       return dp[dp.length - 1];
    }
}

class Solution {
    public int rob(int[] nums) {
      int prev_rob = 0, cur_rob = 0;
      for(int i = 0; i < nums.length; i++){
          int temp = cur_rob;
          //prev的状态为上上个循环里cur的状态，所以代表选择当前和上两个的状态
          //cur的状态是上一个循环里cur的状态，所以代表不选择当前
          cur_rob = Math.max(prev_rob + nums[i], cur_rob);
          prev_rob = temp;
      }

      return cur_rob;
    }
}

152
class Solution {
    public int maxProduct(int[] nums) {
        //careful corner case for res, if only 1 elts in nums, then we just return this one
        //we must set res = nums[0] because if first elts is the largest, we cannot check that because we start from i = 1
        //so set up the init state as nums[0]
        int max_rn = nums[0], min_rn = nums[0], res = nums[0];
        for(int i = 1; i < nums.length; i++){
           //we need to keep track both max_value and min_value for negative value
            int cur = nums[i];
            //we must set an temp_max value to store the max 
            //becuase we do not want to change the cur_max value in computing min_rn
            //max_rn should from the previous loop to indicate the states of last time
            int temp_max = Math.max(cur, Math.max(cur*max_rn, cur*min_rn));
            min_rn = Math.min(cur, Math.min(cur*max_rn, cur*min_rn));
            
            max_rn = temp_max;
            
            res = Math.max(max_rn, res);
        }

        return res;
    }
}

lintcode 394抽象之王
public class Solution {
    /**
     * @param n: An integer
     * @return: A boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int n) {
        // write your code here

        if(n == 0) return false;
        if(n < 3) return true;// 1 2 cases we do not need to consider
        //let say n = 3
        //如果A 无论做什么 1, 2个 B都可以win(move_1), win(move_2)
        //let say n = 4
        //如果A 拿一个，n = 3 lose(mov_1) and lose(mov_2)
        //如果A 拿两个, n = 2 lose(mov_1) and win(mov_2) 或者 win(mov_1) and lose(mov_2)

        //对于n = 3 来说 mov_1 = true mov_2 = true cur_mov = false
        //因为我们从n = 3开始考虑
        boolean mov_1 = true;
        boolean mov_2 = true;
        boolean cur_mov = false;
        //第一和第二个case 不用管， 所以总共我们要管n - 2次循环所以从2 到 n - 1, 一共n - 2次循环
        for(int i = 2; i < n; i++){
            //对于cur_mov来说，如果对方两个mov都可以赢，则对面都能赢
            //mov_2是上上一次的mov_1,也就是上上上次的cur_mov
            //mov_1是上次的cur_mov
            //这次是A的mov 所以上次是B的mov 同理上上次也是B的mov
            cur_mov = !(mov_2 && mov_1);
            boolean temp = mov_1;
            //对于下一次的mov来说，是这一次的cur_mov是A的mov
            mov_1 = cur_mov;
            //对于另外一个mov来说，是上一次上上次的cur_mov是A的mov
            mov_2 = temp;
        }

        return cur_mov;
    }
}


public class Solution {
    /**
     * @param nums: an integer array and all positive numbers
     * @param target: An integer
     * @return: An integer
     */
    public int backPackV(int[] nums, int target) {
        // write your code here
        int[] dp = new int[target + 1];
        //必须为1 比如有个size为1 我们加入1的时候dp[1] = dp[1] + dp[1 - 1] 必须为0
        dp[0] = 1;
        for(int num : nums){
            for(int i = target; i >= 0; i--){
                if(i - num >= 0)
                    dp[i] = dp[i - num] + dp[i];
            }
        }

        return dp[target];
    }
}


20/Mar/2023
注意transition function
class Solution {
	    public int numDecodings(String s) {
        int[] arr = new int[s.length()];
        for(int i = 0; i < s.length(); i++){
            arr[i] = s.charAt(i) - '0';
        }
        int[] memo = new int[s.length()];
        //Top Down DFS + memo
        return DFS(arr, memo, 0);
    }

    public int DFS(int[] arr, int[] memo, int i){
        //base case first
        if(i == arr.length) return 1;

        if(memo[i] != 0) return memo[i];

        int res = 0;
        if(arr[i] != 0)
            res += DFS(arr, memo, i + 1);
        if(i + 1 < arr.length && arr[i]*10 + arr[i + 1] >= 10 && arr[i]*10 + arr[i + 1] <= 26)
            res += DFS(arr, memo, i + 2);

        memo[i] = res;
        return res;
    }
}

//iterative method
class Solution {
    public int numDecodings(String s) {
        int[] dp = new int[s.length() + 1];
        dp[dp.length - 1] = 1;
        for(int i = dp.length - 2; i >= 0; i--){
            if(s.charAt(i) != '0')
                dp[i] += dp[i + 1];
            if(i + 1< dp.length - 1 && Integer.parseInt(s.substring(i, i + 2)) >= 10 && Integer.parseInt(s.substring(i, i + 2)) <= 26)
            dp[i] += dp[i + 2];
        }

        return dp[0];
    }

124
//bipointer method
class Solution {
    public int maxProfit(int[] prices) {
        //profit[i]记录的是当前的最大差价也就是我们的利润
        //left_min一直记录我们的最小的买入价格
        //我们不用担心买入会在卖出后面因为我们是先使用状态
        //也就是说我们compare profit[i - 1]和profit[i] - 最小价格
        //然后更新最小价格
        //每次profit会记录最大利润，然后我们比较每一个当前卖出 - 最小差价的值 和 最大profit
	//记住left_arr比right_arr小一格
        //[0, 1, 3, ...., x]
        //[y, ...., 3, 2, 1, 0]
        //如果0+y最大代表只进行一次交易能实现最大值 
       int left_min = prices[0], right_max = prices[prices.length - 1];
        int[] left_arr = new int[prices.length];
        int[] right_arr = new int[prices.length + 1];

        for(int i = 1; i < left_arr.length; i++){
            left_arr[i] = Math.max(left_arr[i - 1], prices[i] - left_min);
            left_min = Math.min(left_min, prices[i]);
        }

        for(int i = left_arr.length - 2; i >= 0; i--){
            right_max = Math.max(right_max, prices[i]);
            right_arr[i] = Math.max(right_arr[i + 1], right_max - prices[i]);
        }

        int max = 0;
        for(int i = 0; i < left_arr.length; i++){
            max = Math.max(max, left_arr[i] + right_arr[i + 1]);
        }

        return max;
    }
}


22/Mar/2023
474 backpack dp
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        //m -- 0    n -- 1
        //关于backpack类型的dp
        //我们要清晰认知对于dp的两种状态
        //对于dp[i][j]表达的就是0有i个 1有j个中最多有几个subset
        //所以对于我们每次更新一个str来说，我们loop的范围是i : (m -> zero_counter) j : (n -> one_counter)
        //因为如果小于zero_counter的index 比如[0][1] 代表 0个0 1个1 中最多的subset
        //如果我们这个current subset有1个1 1个0 则代表改subset无法进入dp[0][1]的条件
        //因此我们无法对改状态进行+1 我们只能对所有符合状态的数组进行增加
        int[][] dp = new int[m + 1][n + 1];
        for(String str : strs){
            int zero_counter = 0, one_counter = 0;
            for(char c : str.toCharArray()){
                if(c == '0') zero_counter++;
                if(c == '1') one_counter++;
            }
            for(int i = m; i >= zero_counter; i--){
                for(int j = n; j >= one_counter; j--){
                    if(i - zero_counter >= 0 && j - one_counter >= 0)
                        dp[i][j] = Math.max(dp[i][j], dp[i - zero_counter][j - one_counter] + 1);
                }
            }
        }
        return dp[m][n];
    }
}


LintCode 92
Backpack dp
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param a: Given n items with size A[i]
     * @return: The maximum size
     */
    public int backPack(int m, int[] a) {
        // write your code here
        int[] dp = new int[m + 1];
        for(int current_weight : a){
            for(int i = m; i >= current_weight; i--)
                dp[i] = Math.max(dp[i], dp[i - current_weight] + current_weight);
        }

        return dp[m];
    }
}

Lintcode 125
Backpack dp
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param a: Given n items with size A[i]
     * @param v: Given n items with value V[i]
     * @return: The maximum value
     */
    public int backPackII(int m, int[] a, int[] v) {
        // write your code here
        int[] dp = new int[m + 1];
        for(int i = 0; i < a.length; i++){
            int cur_size = a[i], cur_value = v[i];
            for(int j = m; j >= cur_size; j--){
                dp[j] = Math.max(dp[j], dp[j - cur_size] + cur_value);
            }
        }

        return dp[m];
    }
}

Lintcode 440
public class Solution {
    /**
     * @param a: an integer array
     * @param v: an integer array
     * @param m: An integer
     * @return: an array
     */
    public int backPackIII(int[] a, int[] v, int m) {
        // write your code here
        int[] dp = new int[m + 1];
        for(int i = 0; i < a.length; i++){
            int cur_size = a[i], cur_value = v[i];
            for(int j = cur_size; j <= m; j++){
                dp[j] = Math.max(dp[j], dp[j - cur_size] + cur_value);
            }
        }

        return dp[m];
    }
}


Lintcode 89
Backpack accumulate problem
public class Solution {
    /**
     * @param a: An integer array
     * @param k: A positive integer (k <= length(A))
     * @param target: An integer
     * @return: An integer
     */
    public int kSum(int[] a, int k, int target) {
        // write your code here
        //注意backpack中有两种题型
        //第一种是问你有多少种ways去储存东西 : dp[i] += dp[i - current];
        //第二种是问你最大的情况 : dp[i] = Math.max();
        //记住如果是不要重复 两个循环都是要从后向前 因为从最后一个开始时前面的都没更新
        //所以没有overlap
        int[][] dp = new int[k + 1][target + 1];
        dp[0][0] = 1;
        for(int current_val : a){
            for(int i = k; i > 0; i--){
                for(int j = target; j >= current_val; j--){
                    dp[i][j] +=  dp[i - 1][j - current_val];
                }
            }
        }
        return dp[k][target];
    }
}

Leetcode 516
class Solution {
    public int longestPalindromeSubseq(String s) {
        //方向很重要i stands for the beginning character j: ends
        //对于 i，j 我们要从后往前循环 从左往右循环 因为我们看的是左下角的值 或者是 左边和下面的值
        //我们需要先讲左下角初始化好了 才可以往上循环
        //切记循环顺序通过dp的trans function来决定
        int[][] dp = new int[s.length()][s.length()];
        for(int i = s.length() - 1; i >= 0; i--){
            dp[i][i] = 1;
            for(int j = i + 1; j < s.length(); j++){
                if(s.charAt(i) == s.charAt(j))
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                else
                    dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);
            }
        }

        return dp[0][s.length() - 1];
    }
}
